name: Test, Build, and Deploy

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: recruiter-test-db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4.1.1

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # override spring.datasource.url
      # - name: Setup config
      #   run: |
      #     mkdir config
      #     echo 'spring.datasource.url=jdbc:postgresql://postgres:5432/recruiter-test-db' > config/application.properties

      - name: Build with Maven and skip tests
        working-directory: server
        run: mvn -B package --file pom.xml -DskipTests

      # - name: Install client dependencies
      #   working-directory: client
      #   run: npm ci

      # - name: Type check client
      #   working-directory: client
      #   run: npm run typecheck

      # - name: Lint client
      #   working-directory: client
      #   run: npm run lint

      # - name: Install Playwright Browsers
      #   working-directory: client
      #   run: npx playwright install --with-deps chromium

      - name: Run server
        working-directory: server/target
        env:
          DB_HOST: postgres:5432
          DB_NAME: recruiter-test-db
          DB_USER: postgres
          DB_PASSWORD: postgres
          SERVER_PORT: 3000
          JWT_SECRET: supersecretkey
        run: java -jar recruiter-1.0-SNAPSHOT.jar 

      - name: Build front end for E2E tests
        working-directory: client
        run: npm run build
        env:
          VITE_API_ORIGIN: http://localhost:3000
          VITE_API_PATH: /api/v1

      - name: Health probe
        uses: Jtalk/url-health-check-action@v4
        with:
          max-attempts: 5
          retry-delay: 5s
          url: http://localhost:3000/actuator/health

      - name: Readiness probe
        uses: Jtalk/url-health-check-action@v4
        with:
          max-attempts: 5
          retry-delay: 5s
          url: http://localhost:3000/actuator/info
      
      - name: Test client E2E
        working-directory: client
        run: npm run test:e2e

      - uses: actions/upload-artifact@v4.3.1
        if: always()
        with:
          name: playwright-report
          path: client/playwright-report/
          retention-days: 7


  # gcloud-deploy:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/prod'
    # env:
  #     NODE_ENV: production
  #     TOKEN_KEY: ${{ secrets.TOKEN_KEY }}
  #     TOKEN_EXPIRES_IN: ${{ vars.TOKEN_EXPIRATION }}
  #     SMTP_SERVICE: ${{ vars.SMTP_SERVICE }}
  #     SMTP_HOST: ${{ vars.SMTP_HOST }}
  #     SMTP_PORT: ${{ vars.SMTP_PORT }}
  #     SMTP_SECURE_CONNECTION: true
  #     SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
  #     SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
  #     SMTP_SENDER: ${{ secrets.SMTP_USERNAME }}
  #     GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
  #     CLIENT_PATH: ${{ vars.CLIENT_PATH }}
  #     API_ORIGIN: ${{ vars.API_ORIGIN }}
  #     API_PATH: ${{ vars.API_PATH }}
  #     API_PROXY_PASS: ${{ vars.API_PROXY_PASS }}
  #     AWS_LIGHTSAIL_SERVICE: ${{ vars.AWS_LIGHTSAIL_SERVICE }}
  #     CLIENT_IMAGE_TAG: client-${{ github.sha }}
  #     SERVER_IMAGE_TAG: server-${{ github.sha }}
    # check out the repository and authenticate to Google Cloud. 
    # steps:
    #  - name: 'Checkout'
    #    uses: 'actions/checkout@v4'

    #  - name: 'Google auth'
    #    id: 'auth'
    #    uses: 'google-github-actions/auth@v1'
    #    with:
    #      workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
    #      service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: ${{ vars.AWS_REGION }}
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #     - name: Build server image
  #       run: >-
  #         docker build
  #         --platform linux/amd64
  #         -t $SERVER_IMAGE_TAG
  #         -f ./server/Dockerfile .

  #     - name: Build client image
  #       run: >-
  #         docker build
  #         --platform linux/amd64
  #         -t $CLIENT_IMAGE_TAG
  #         --build-arg VITE_API_ORIGIN=$API_ORIGIN
  #         --build-arg VITE_API_PATH=$API_PATH
  #         --build-arg VITE_GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY
  #         -f ./client/Dockerfile .

  #     - name: Push server image
  #       run: >-
  #         aws lightsail push-container-image
  #         --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }}
  #         --label $SERVER_IMAGE_TAG
  #         --image $SERVER_IMAGE_TAG
  #         --output yaml

  #     - name: Push client image
  #       run: >-
  #         aws lightsail push-container-image
  #         --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }}
  #         --label $CLIENT_IMAGE_TAG
  #         --image $CLIENT_IMAGE_TAG
  #         --output yaml

  #     - name: Get Lightsail image tag
  #       run: |
  #         aws lightsail get-container-images --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} | jq -r '.containerImages[] | select(.image | contains(".'$SERVER_IMAGE_TAG'")) | .image'
  #         echo "LIGHTSAIL_SERVER_IMAGE=$(aws lightsail get-container-images --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} | jq -r '.containerImages[] | select(.image | contains(".'$SERVER_IMAGE_TAG'")) | .image')" >> $GITHUB_ENV
  #         echo "LIGHTSAIL_CLIENT_IMAGE=$(aws lightsail get-container-images --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} | jq -r '.containerImages[] | select(.image | contains(".'$CLIENT_IMAGE_TAG'")) | .image')" >> $GITHUB_ENV

  #     - name: Create containers.json
  #       run: |
  #         echo '{
  #           "client": {
  #             "image": "${{ env.LIGHTSAIL_CLIENT_IMAGE }}",
  #             "ports": {
  #               "80": "HTTP"
  #             },
  #             "environment": {
  #               "API_PROXY_PASS": "http://localhost:3000"
  #             }
  #           },
  #           "server": {
  #             "image": "${{ env.LIGHTSAIL_SERVER_IMAGE }}",
  #             "ports": {
  #               "3000": "HTTP"
  #             },
  #             "environment": {
  #               "NODE_ENV": "production",
  #               "DB_SSL": "true",
  #               "DB_SYNC": "true",
  #               "DB_HOST": "${{ secrets.PROD_DB_HOST }}",
  #               "DB_NAME": "${{ secrets.PROD_DB_NAME }}",
  #               "DB_USER": "${{ secrets.PROD_DB_USER }}",
  #               "DB_PASSWORD": "${{ secrets.PROD_DB_PASSWORD }}",
  #               "TOKEN_KEY": "${{ secrets.TOKEN_KEY }}",
  #               "TOKEN_EXPIRES_IN": "${{ vars.TOKEN_EXPIRATION }}",
  #               "SMTP_SERVICE": "${{ vars.SMTP_SERVICE }}",
  #               "SMTP_HOST": "${{ vars.SMTP_HOST }}",
  #               "SMTP_PORT": "${{ vars.SMTP_PORT }}",
  #               "SMTP_SECURE_CONNECTION": "true",
  #               "SMTP_USERNAME": "${{ secrets.SMTP_USERNAME }}",
  #               "SMTP_PASSWORD": "${{ secrets.SMTP_PASSWORD }}",
  #               "SMTP_SENDER": "${{ secrets.SMTP_USERNAME }}",
  #               "CLIENT_PATH": "${{ vars.CLIENT_PATH }}",
  #               "GOOGLE_MAPS_API_KEY": "${{ secrets.GOOGLE_MAPS_API_KEY }}"
  #             }
  #           }
  #         }' > containers.json

  #     - name: Create public-endpoint.json file
  #       run: |
  #         echo '{
  #           "containerName": "client",
  #           "containerPort": 80,
  #           "healthCheck": {
  #             "intervalSeconds": 10,
  #             "path": "/api/health"
  #           }
  #         }' > public-endpoint.json

  #     - name: Deploy to AWS Lightsail
  #       run: |
  #         aws lightsail create-container-service-deployment \
  #         --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} \
  #         --containers file://containers.json \
  #         --public-endpoint file://public-endpoint.json
