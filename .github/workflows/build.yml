name: Build and Deploy

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:

  DB_HOST: ${{ secrets.DB_HOST }}
  DB_NAME: ${{ secrets.DB_NAME }} # Add frontend-specific environment variables here
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_SSL: ${{ secrets.DB_SSL }}
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
  EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
  GOOGLE_CLOUD_BUCKET_NAME: ${{ secrets.GOOGLE_CLOUD_BUCKET_NAME }}
  GOOGLE_CLOUD_PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

  CLIENT_BASE_URL: ${{ vars.CLIENT_BASE_URL }}
  CLIENT_RESET_PASSWORD_URL: ${{ vars.CLIENT_RESET_PASSWORD_URL }}
  EMAIL_HOST: ${{ vars.EMAIL_HOST }}
  EMAIL_PORT: ${{ vars.EMAIL_PORT }}
  EMAIL_SERVICE_DEBUG: ${{ vars.EMAIL_SERVICE_DEBUG }}
  JWT_EXPIRATION_MS: ${{ vars.JWT_EXPIRATION_MS }}
  RESET_PASSWORD_TOKEN_EXPIRATION_SECONDS: ${{ vars.RESET_PASSWORD_TOKEN_EXPIRATION_SECONDS }}
  SERVER_PORT: ${{ vars.SERVER_PORT }}
  DEBUG_LEVEL: ${{ vars.DEBUG_LEVEL }}

jobs:
  build:
    name: Build Backend and Frontend
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 20 ]
        java-version: [ 17 ]  # Specify your Java version

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Java
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: ${{ matrix.java-version }}

      # Set up Node.js for frontend
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build Client
        working-directory: ./client
        run: |
          npm install
          npm run build

      - name: Build Server
        working-directory: ./server
        run: |
          ./mvnw clean package \
            -Dserver.port=${SERVER_PORT} \
            -Dserver.error.include-message=always \
            -Dgoogle.storage.bucket.name=${GOOGLE_CLOUD_BUCKET_NAME} \
            -Dgoogle.storage.project.id=${GOOGLE_CLOUD_PROJECT_ID} \
            -Dpassword.reset.token.expirationInSeconds=${RESET_PASSWORD_TOKEN_EXPIRATION_SECONDS} \
            -Dclient.base-url=${CLIENT_BASE_URL} \
            -Dclient.reset-password-url=${CLIENT_RESET_PASSWORD_URL} \
            -Dlogging.level.root=${DEBUG_LEVEL} \
            -Dlogging.level.org.springframework.web=DEBUG \
            -Dlogging.level.org.springframework.mail=DEBUG \
            -Dlogging.level.org.hibernate=ERROR \
            -Dmanagement.endpoints.web.exposure.include=* \
            -Dmanagement.endpoint.health.show-details=always \
            -Dspring.servlet.multipart.max-file-size=5MB \
            -Dspring.servlet.multipart.max-request-size=5MB \
            -Dspring.mail.host=${EMAIL_HOST} \
            -Dspring.mail.port=${EMAIL_PORT} \
            -Dspring.mail.username=${EMAIL_USERNAME} \
            -Dspring.mail.password=${EMAIL_PASSWORD} \
            -Dspring.mail.properties.mail.debug=${EMAIL_SERVICE_DEBUG} \
            -Dspring.mail.properties.mail.smtp.auth=true \
            -Dspring.mail.properties.mail.smtp.starttls.enable=true \
            -Dspring.thymeleaf.check-template-location=false \
            -Dspring.jpa.hibernate.ddl-auto=none \
            -Dspring.jpa.show-sql=false \
            -Dspring.jpa.properties.hibernate.format-sql=true \
            -Dspring.jpa.properties.hibernate.jdbc.time_zone=UTC \
            -Dspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect \
            -Dspring.liquibase.change-log=db/changelog/db.changelog-master.xml \
            -Dspring.liquibase.enabled=true \
            -Dspring.liquibase.show-summary=summary \
            -Dcors.allowed-origins=${CORS_ALLOWED_ORIGINS} \
            -Dcors.allowed-methods=* \
            -Dcors.allowed-headers=* \
            -Dcors.exposed-headers=* \
            -Djwt.jwtSecret=${JWT_SECRET} \
            -Djwt.jwtExpirationInMs=${JWT_EXPIRATION_MS} \
            -Dspring.datasource.platform=postgres \
            -Dspring.datasource.driverClassName=org.postgresql.Driver \
            -Dspring.datasource.url=jdbc:postgresql://${DB_HOST}/${DB_NAME}?user=${DB_USER}&password=${DB_PASSWORD}&sslmode=${DB_SSL} 

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push server image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/recruiter-server:latest
          context: ./server
          file: ./server/Dockerfile

      - name: Build and push client image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/recruiter-client:latest
          context: ./client
          file: ./client/Dockerfile

